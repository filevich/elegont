# Elegont 2017 v1.0.0

file_extension:  .ego
input_dir:       ./test/input/
out_dir:         ./test/output/
recursive:       FALSE
remove_comments: TRUE
last_comma:      FALSE
identation:      TAB
syntax:

  import:
    - definition: import\s\"[[:alpha:]]+\" # e.g.: import "fmt"

  comment:
    - definition: someregexphere

  if:
    - definition: someregexphere

  while:
    - definition: someregexphere

  package:
    - definition: package\s[[:alpha:]]+

  type:
    - definition: someregexphere

  struct:
    - definition: someregexphere

  variable:
    - definition: let\s(?P<NAME>[[:alpha:]]+)\s(?P<TYPE>[[:alpha:]]+)\s\=\s(?P<VALUE>.+) # e.g.: `let n int = 99`
    
    - definition: (?P<NAME>[[:alpha:]]+)\s?\:\=\s?(?P<VALUE>.+) # e.g.: `n := 99`
    
    - definition: VAR # e.g.: `VAR ( ... )`
      delimiters: [ROUND_BRACKETS]
    
  for:
    - definition: for [^\n]+\; [^\n]+\; [^\n]+
      delimiters: [TABS]

  func:
    - definition: ([[:word:]]+)(\.[[:word:]]+)?\([^\n]+\) # e.g.: fmt.Printf("Hello bro %v", n)

    - definition: func\s[[:alpha:]]+\(.?\) # e.g.: func main()
      delimiters: [CURLY_BRACKETS, TABS]

  inc:
    - definition: ([[:word:]]+)\+\+ # e.g.: n++